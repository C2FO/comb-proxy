{"name":"Comb-proxy","body":"comb-proxy\r\n==========\r\n\r\nOverview\r\n--------\r\n\r\nPlugin for comb to expose ProxyHelpers.\r\n\r\n## Installation\r\n\r\n    npm install comb-proxy\r\n    \r\n    \r\n##Usage\r\n    \r\nTo initialize comb-proxy simply require it.\r\n    \r\n```javascript\r\n   \r\n   var comb = require(\"comb-proxy\");\r\n    \r\n```\r\n\r\n###comb Proxy helper functions\r\n\r\ncomb-proxy adds serveral methods to ease the use of the Proxy API\r\n\r\n * comb.handlerProxy(obj, prox, proto?) : creates a simple proxy around an object\r\n * comb.methodMissing(obj, handler, proto?) : creates a method/propery missing wrapper\r\n \r\n\r\n```javascript\r\nvar x = {hello:function () {return \"hello\"}, world:\"world\"};\r\nvar xHandler = comb.methodMissing(x, function (m) {\r\n              //you can do more interesting stuff in here!\r\n           return function () {\r\n               return [m].concat(comb.argsToArray(arguments));\r\n           }\r\n});\r\nxHandler.hello(); //=> \"hello\"\r\nxHandler.world //=> \"world\"\r\nxHandler.someMethod(\"hello\", \"world\"); //=> [ 'someMethod', 'hello', 'world' ]\r\n```\r\n\r\n  * comb.isProxy(obj) : tests if something is a proxy\r\n  * comb.createFunctionWrapper(obj, handler, constructTrap, proto) : creates a function wrapper around an object\r\n\r\n\r\n```javascript\r\n                                                                                                                   \r\n//create an object that can use properties or as a function through the new operator                               \r\nvar MyObject = comb.define(null, {                                                                                 \r\n    instance : {                                                                                                   \r\n        hello : \"hello\",                                                                                           \r\n        constructor : function(){                                                                                  \r\n            this.args = comb.argsToArray(arguments);                                                               \r\n        }                                                                                                          \r\n    }                                                                                                              \r\n});                                                                                                                \r\n                                                                                                                   \r\n//NOTE: this will not work properly for native objects like Date.                                                  \r\nvar createNewMyObject = function(){                                                                                \r\n   try {                                                                                                           \r\n     p = new MyObject();                                                                                           \r\n    } catch (ignore) {                                                                                             \r\n         //ignore the error because its probably from missing arguments                                            \r\n    }                                                                                                              \r\n    //Now lets take care of arguments supplied!!!                                                                  \r\n    MyObject.apply(p, comb.argsToArray(arguments));                                                                \r\n    return p;                                                                                                      \r\n};                                                                                                                 \r\n                                                                                                                   \r\n//This example creates an object with a world property but its not a function!                                     \r\nvar handle = comb.createFunctionWrapper({world : \"world\"}, createNewMyObject, createNewMyObject);                  \r\n                                                                                                                   \r\nhandle.world //=> \"world\"                                                                                          \r\nvar a = handle(1);                                                                                                 \r\na.hello;  //=>\"hello\"                                                                                              \r\na.args; //=> [1];                                                                                                  \r\na = new handle(1,2);                                                                                               \r\na.hello; //=>\"hello\"                                                                                               \r\na.args; //=> [1,2];                                                                                                \r\n```\r\n                                        \r\n  \r\n\r\n###comb.executeInOrder\r\n\r\nComb Proxy adds a method called comb.executeInOrder which allows you to write async code in a synchronous manner using proxies.\r\n\r\n```javascript\r\nvar comb = require(\"comb-proxy\");\r\n\r\n//create a funciton that executes synchronously\r\nvar staticValueFunction = function (value) {                                                                                                  \r\n     return comb.argsToArray(arguments).join(\" \");                                                                                            \r\n};                                                                                                                                            \r\n                 \r\n//an async version of the same code                 \r\nvar promiseValueFunction = function (value) {                                                                                                 \r\n     var ret = new comb.Promise();                                                                                                            \r\n     setTimeout(comb.hitch(ret, \"callback\", comb.argsToArray(arguments).join(\" \")), 100);                                                     \r\n     return ret;                                                                                                                              \r\n};                                                                                                                                            \r\n        \r\n//You can also pass in objects to execute in order\r\nvar hash = {                                                                                                                                  \r\n     staticValueFunction:staticValueFunction,                                                                                                 \r\n     promiseValueFunction:promiseValueFunction                                                                                                \r\n};                                                                                                                                            \r\n      \r\n//Pass in each function/object you wish to proxy      \r\nvar p = comb.executeInOrder(hash, staticValueFunction, promiseValueFunction, function (hash, staticValueFunction, promiseValueFunction) {     \r\n    //in here you can just use the methods as if they were synchronous\r\n    var toBe = staticValueFunction(promiseValueFunction(\"to\"), \"be\");                                                                         \r\n    var notToBe = hash.promiseValueFunction(\"or\", hash.staticValueFunction(\"not\", toBe));                                                     \r\n    return hash.promiseValueFunction(toBe, notToBe);                                                                                          \r\n}); \r\n//listen for the results\r\np.addCallback(function(ret){                                                                                                                  \r\n    console.log(ret); //=>\"to be or not to be\"                                                                                                \r\n});                                                                                                                                           \r\n```\r\n\r\n###comb.plugins.MethodMissing\r\n\r\ncomb-proxy also adds a MethodMissing plugin to be used with objects to similate method missing calls.\r\n\r\n```javascript\r\nvar comb = require(\"comb-proxy\")\r\n\r\n//Example use with a builder\r\nvar Builder = comb.define(comb.plugins.MethodMissing, {\r\n\r\n    instance:{\r\n\r\n        __WITH_REGEX:/^with(\\w+)/,\r\n\r\n        __GET_REGEX:/^get(\\w+)(\\d+)/,\r\n\r\n        _attributes:null,\r\n\r\n        constructor:function () {\r\n            this._super(arguments);\r\n            this._attributes = {};\r\n        },\r\n\r\n\r\n        getMissingProperty:function (name) {\r\n            var match = name.match(this.__GET_REGEX);            \r\n            if (match != null) {\r\n                //if it starts with get and ends with an integer\r\n                //then we'll assume you are looking for a subbuilder\r\n                var prop = match[1];\r\n                return this[\"_\" + prop.charAt(0).toLowerCase() + prop.substr(1) + \"s\"][parseInt(match[2], 10) - 1];\r\n            } else if((match = name.match(this.__WITH_REGEX)) != null){\r\n                //setting an attribute\r\n                var prop = match[1];\r\n                return comb.hitch(this, function(val){\r\n                    this._attributes[prop.charAt(0).toLowerCase() + prop.substr(1)] = val;\r\n                    return this;\r\n                });\r\n            } else {\r\n                return this._super(arguments);\r\n            }\r\n        }\r\n    },\r\n\r\n    static:{\r\n        create:function () {\r\n          //return a new instance of this\r\n            return new this();\r\n        }\r\n    }\r\n});  \r\n\r\nvar PostBuilder = comb.define(Builder, {\r\n     instance : {\r\n       constructor : function(title, text, date){\r\n          this._super(arguments);          \r\n          this._attributes = {\r\n            title : title || \"\",\r\n            text : text || \"\",\r\n            date : date || null\r\n          }\r\n       }             \r\n     }          \r\n});\r\n\r\nvar BlogBuilder = comb.define(Builder, {\r\n  instance : {\r\n       constructor : function(){\r\n          this._super(arguments);          \r\n          this._posts = [];\r\n          this._attributes = {\r\n            title : \"\"\r\n          }\r\n       },\r\n       \r\n       //add a method for adding new posts\r\n       withPost : function(post){\r\n          this._posts.push(post);\r\n       }\r\n     },\r\n     \r\n     static : {              \r\n       \r\n       //a helper to create a new builder with a post\r\n       createWithPost : function(blogTitle, title, text, date){\r\n         return this.create()\r\n                      .withTitle(blogTitle)\r\n                      .withPost(PostBuilder.create()\r\n                                            .withTitle(title)\r\n                                            .withText(text)\r\n                                            .withDate(date));\r\n       }\r\n     }\r\n});\r\n\r\n//create a new blog\r\nvar blogBuilder = BlogBuilder.create(\"MyBlog\", \"Post1\", \"Hello Word\", Date.now());\r\n//acces post with dynamic getter\r\nvar postBuilder = blogBuilder.getPostBuilder1.withTitle(\"Changed Title\");\r\n\r\n```\r\n\r\n\r\nLicense\r\n-------\r\n\r\nMIT <https://github.com/Pollenware/comb/raw/master/LICENSE>\r\n\r\nMeta\r\n----\r\n\r\n* Code: `git clone git://github.com/pollenware/comb-proxy.git`\r\n* JsDoc: <http://pollenware.github.com/comb-proxy>\r\n* Website:  <http://pollenware.com> - Twitter: <http://twitter.com/pollenware> - 877.465.4045","tagline":"Proxy plugin for comb library","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}